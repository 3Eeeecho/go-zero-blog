// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: usercenter.proto

package usercenter

import (
	"context"

	"github.com/3Eeeecho/go-zero-blog/app/usercenter/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateTokenReq       = pb.GenerateTokenReq
	GenerateTokenResp      = pb.GenerateTokenResp
	LoginRequest           = pb.LoginRequest
	LoginResponse          = pb.LoginResponse
	RegisterRequest        = pb.RegisterRequest
	RegisterResponse       = pb.RegisterResponse
	UpdatePasswordRequest  = pb.UpdatePasswordRequest
	UpdatePasswordResponse = pb.UpdatePasswordResponse
	UpdateUsernameRequest  = pb.UpdateUsernameRequest
	UpdateUsernameResponse = pb.UpdateUsernameResponse
	User                   = pb.User

	Usercenter interface {
		// 用户登录
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		// 用户注册
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		// 修改用户名
		UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*UpdateUsernameResponse, error)
		// 修改密码
		UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
		// 生成 token
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

// 用户登录
func (m *defaultUsercenter) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 用户注册
func (m *defaultUsercenter) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 修改用户名
func (m *defaultUsercenter) UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*UpdateUsernameResponse, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdateUsername(ctx, in, opts...)
}

// 修改密码
func (m *defaultUsercenter) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdatePassword(ctx, in, opts...)
}

// 生成 token
func (m *defaultUsercenter) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}
